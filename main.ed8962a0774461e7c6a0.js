!function(e){function t(t){for(var r,l,o=t[0],d=t[1],a=t[2],u=0,c=[];u<o.length;u++)l=o[u],n[l]&&c.push(n[l][0]),n[l]=0;for(r in d)Object.prototype.hasOwnProperty.call(d,r)&&(e[r]=d[r]);for(h&&h(t);c.length;)c.shift()();return s.push.apply(s,a||[]),i()}function i(){for(var e,t=0;t<s.length;t++){for(var i=s[t],r=!0,o=1;o<i.length;o++){var d=i[o];0!==n[d]&&(r=!1)}r&&(s.splice(t--,1),e=l(l.s=i[0]))}return e}var r={},n={1:0},s=[];function l(t){if(r[t])return r[t].exports;var i=r[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,l),i.l=!0,i.exports}l.m=e,l.c=r,l.d=function(e,t,i){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(l.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)l.d(i,r,function(t){return e[t]}.bind(null,r));return i},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var o=window.webpackJsonp=window.webpackJsonp||[],d=o.push.bind(o);o.push=t,o=o.slice();for(var a=0;a<o.length;a++)t(o[a]);var h=d;s.push([1,0]),i()}([,function(e,t,i){"use strict";i.r(t);var r=i(0);class n{constructor(e){if(!e&&(Array.isArray(e)||!(e instanceof File)||!(e instanceof FileList)))throw new Error("Wrong file type in the Dicom constructor");this.files=Array.from(e),this.filesUrl={}}getUrl(e){if(e instanceof File)return~this.files.find(t=>t===e)?this.filesUrl[e.name]?this.filesUrl[e.name]:this.filesUrl[e.name]=URL.createObjectURL(e):null;if("number"==typeof e){const t=this.files[e];return t?this.filesUrl[t.name]?this.filesUrl[e.name]:this.filesUrl[t.name]=URL.createObjectURL(t):null}if("string"==typeof e){const t=this.files.find(({name:t})=>t===e);return t?this.filesUrl[t.name]?this.filesUrl[e.name]:this.filesUrl[t.name]=URL.createObjectURL(t):null}return null}getUrls(){return this.files.map(e=>this.getUrl(e))}getUrlsWithFileName(){return this.files.reduce((e,t)=>{const i=this.getUrl(t);return e[t.name]=i,e},{})}}i(6);class s{constructor(e=[]){this.files=null,this.supportedFiles=e,this.selectFilesHandler=this.selectFilesHandler.bind(this),this.initHTML()}initHTML(){const e=document.createElement("div"),t=document.createElement("input"),i=document.createElement("label"),r=document.createElement("label"),n=document.createElement("button-app");e.classList.add("file-selecting-container"),t.classList.add("file-selecting-input"),i.classList.add("button-app"),r.classList.add("file-selecting-drag-and-drop"),r.classList.add("file-selecting-drag-and-drop-empty"),n.classList.add("file-selecting-submit"),n.classList.add("button-app"),i.setAttribute("for","file-selecting"),r.setAttribute("for","file-selecting"),t.setAttribute("type","file"),t.setAttribute("name","file-selecting"),t.setAttribute("id","file-selecting"),t.setAttribute("multiple",""),i.innerText="Выберите файлы",n.innerText="Ок",0!==this.supportedFiles.length&&t.setAttribute("accept",this.supportedFiles.join(", ")),e.appendChild(t),e.appendChild(i),e.appendChild(r),e.appendChild(n),this.input=t,this.labelButton=i,this.labelDragAndDrop=r,this.submitButton=n,this.html=e,t.addEventListener("change",this.selectFilesHandler),r.addEventListener("dragenter",e=>{e.stopPropagation(),e.preventDefault(),r.style.backgroundColor="rgba(0, 0, 0, 0.1)"},!1),r.addEventListener("dragleave",()=>{r.style.backgroundColor="initial"},!1),r.addEventListener("dragover",e=>{e.stopPropagation(),e.preventDefault()},!1),r.addEventListener("drop",this.selectFilesHandler,!1),r.addEventListener("click",e=>{e.preventDefault()},!1)}selectFilesHandler(e){void 0!==e.target.files?this.files=Array.from(e.target.files):(e.stopPropagation(),e.preventDefault(),this.files=Array.from(e.dataTransfer.files)),0!==this.files.length?(this.labelDragAndDrop.innerText=this.files.map(({name:e})=>e).join("\n"),this.labelDragAndDrop.classList.contains("file-selecting-drag-and-drop-empty")&&this.labelDragAndDrop.classList.remove("file-selecting-drag-and-drop-empty")):(this.labelDragAndDrop.innerText="",this.labelDragAndDrop.classList.contains("file-selecting-drag-and-drop-empty")||this.labelDragAndDrop.classList.add("file-selecting-drag-and-drop-empty")),this.labelDragAndDrop.style.backgroundColor="initial"}getFile(e){return null!==this.files&&this.files[e]?this.files[e]:null}show(){document.body.appendChild(this.html)}remove(){document.body.removeChild(this.html)}getFiles(){return new Promise((e,t)=>{this.submitButton.onclick=(()=>{const i=this.supportedFiles,r=this.files;if(null===r)return null;if(0!==i.length)for(let e=0;e<r.length;e++){let n=!1;for(let t=0;t<i.length;t++)if(new RegExp("\\"+i[t]+"$").test(r[e].name)){n=!0;break}if(!n)return void t(`Unsupported file: ${r[e].name}`)}e(r)})})}}class l{constructor(e){this.volume=e}initDefault(){this.volume.volumeRendering=!0,this.volume.lowerThreshold=80,this.volume.upperThreshold=1200,this.volume.windowLow=115,this.volume.windowHigh=360,this.volume.minColor=[.2,.06666666666666667,1],this.volume.maxColor=[.5843137254901961,1,0],this.volume.opacity=.2}setVolumeRendering(e=!0){this.volume.volumeRendering=e}getVolume(){return this.volume}get opacity(){return this.volume.opacity}set opacity(e){this.volume.opacity=e}get lowerThreshold(){return this.volume.lowerThreshold}set lowerThreshold(e){this.volume.lowerThreshold=e}get upperThreshold(){return this.volume.upperThreshold}set upperThreshold(e){this.volume.upperThreshold=e}get windowLow(){return this.volume.windowLow}set windowLow(e){this.volume.windowLow=e}get windowHigh(){return this.volume.windowHigh}set windowHigh(e){this.volume.windowHigh=e}get minColor(){return[255*this.volume.minColor[0],255*this.volume.minColor[1],255*this.volume.minColor[2]]}set minColor(e){this.volume.minColor[0]=e[0]/256,this.volume.minColor[1]=e[1]/256,this.volume.minColor[2]=e[2]/256}get maxColor(){return[255*this.volume.maxColor[0],255*this.volume.maxColor[1],255*this.volume.maxColor[2]]}set maxColor(e){this.volume.maxColor[0]=e[0]/256,this.volume.maxColor[1]=e[1]/256,this.volume.maxColor[2]=e[2]/256}}const o=document.createElement("script");o.src="xtk.js",document.getElementsByTagName("head")[0].appendChild(o),window.onload=(()=>{(new class{constructor(){this.fileSelector=new s([".dcm"]),this.onShowtime=this.onShowtime.bind(this),this.init()}init(){this._2dR=null,this._3dR=new X.renderer3D,this._3dR.init(),this.gui={gui:new r.a},this._rendrer="3D",this.show2D=!0,this.gui.options=this.gui.gui.addFolder("Options:"),this.gui.options.add(this,"resetFile").name("Choose another file"),this.gui.options.add(this,"_rendrer",["2D","3D"]).name("Renderer Type:").onFinishChange(e=>{"3D"===e?(cancelAnimationFrame(this._2dR.He),this.hide2DRenderer(),this.reveal3DRenderer(),this.setControlsFor3D(),this._3dR.render(),this.gui.renderControls.open()):(cancelAnimationFrame(this._3dR.He),this.hide3DRenderer(),this.reveal2DRenderer(),this.setControlsFor2D(),this._2dR.render(),this.gui.renderControls.open())}),this._orientation2DCanvases="Z",this.gui.renderControls=null,this.hideControls(),this.files={dicom:[],currentFileInfo:{type:"dicom",index:-1}},this.currentFile={_2d:{volumes:[],canvases:[],currentIndex:0,currentFileName:""},_3d:{volume:null,volumeControls:null}},Object.defineProperty(this.currentFile._2d,"volume",{get:function(){return this.volumes[this.currentIndex]}}),Object.defineProperty(this.currentFile._2d,"renderer",{get:function(){return this.canvases[this.currentIndex]}})}set orientation2DCanvases(e="Z"){this.currentFile._2d.canvases.forEach(e=>{e.destroy()}),this.currentFile._2d.canvases=[],this.init2DCanvases(e),this.reveal2DRenderer(),this._2dR.render()}get orientation2DCanvases(){return this._orientation2DCanvases}setControlsFor2D(){null!==this.gui.renderControls&&this.gui.gui.removeFolder(this.gui.renderControls),this.gui.renderControls=this.gui.gui.addFolder("Render Controls"),this.gui.renderControls.add(this.currentFile._2d,"currentFileName").name("File Name:").listen().domElement.style.pointerEvents="none",this.gui.renderControls.add(this.currentFile._2d,"currentIndex").min(0).max(this.currentFile._2d.volumes.length-1).step(1).name("File number:").onChange(()=>{cancelAnimationFrame(this._2dR.He),this.hide2DRenderer(),this._2dR=this.currentFile._2d.renderer,this.currentFile._2d.currentFileName=this.fileSelector.getFile(this.currentFile._2d.currentIndex).name,this.reveal2DRenderer(),this._2dR.render()}),this.gui.renderControls.add(this,"orientation2DCanvases",["X","Y","Z"]).name("Orientation:")}resetFile(){this.currentFile._2d.canvases.forEach(e=>{e.destroy()}),this._3dR.destroy(),this.gui.gui.destroy(),this.init(),this.selectFiles()}setControlsFor3D(){null!==this.gui.renderControls&&this.gui.gui.removeFolder(this.gui.renderControls),this.gui.renderControls=this.gui.gui.addFolder("Render Controls");const e=this.currentFile._3d.volumeControls;this.gui.renderControls.add(e,"opacity",0,1),this.gui.renderControls.add(e,"lowerThreshold",0,1e3),this.gui.renderControls.add(e,"upperThreshold",0,2e3),this.gui.renderControls.add(e,"windowLow",0,1e3),this.gui.renderControls.add(e,"windowHigh",0,1e3),this.gui.renderControls.addColor(e,"minColor"),this.gui.renderControls.addColor(e,"maxColor")}async selectFiles(){const e=this.fileSelector;let t;e.show();try{t=await e.getFiles()}catch(e){this.selectFiles()}finally{e.remove()}null===t&&(e.remove(),this.selectFiles()),this.addFile(new n(t)),this.revealControls(),this._3dR.add(this.currentFile._3d.volume),this._3dR.onShowtime=this.onShowtime,this._3dR.render()}addFile(e){this.files.dicom.push(e),this.files.currentFileInfo.type="dicom",this.files.currentFileInfo.index+=1;const t=e.getUrls(),i=new X.volume;i.file=t,this.currentFile._3d.volume=i,this.currentFile._3d.volumeControls=new l(i),this.currentFile._2d.volumes=t.map(e=>{const t=new X.volume;return t.file=e,t.borders=!1,t}),this.init2DCanvases(this._orientation2DCanvases)}init2DCanvases(e="Z"){this.currentFile._2d.canvases=this.currentFile._2d.volumes.map(t=>{const i=new X.renderer2D;return i.orientation=e,i.init(),i.add(t),i.T.Re.H.style.display="none",i}),this.currentFile._2d.currentFileName=this.fileSelector.getFile(this.currentFile._2d.currentIndex).name,this._2dR=this.currentFile._2d.renderer,this._orientation2DCanvases=e}hideControls(){this.gui.gui.domElement.style.display="none"}revealControls(){this.gui.gui.domElement.style.display="initial"}hide2DRenderer(){this._2dR.T.Re.H.style.display="none"}reveal2DRenderer(){this._2dR.T.Re.H.style.display="initial"}hide3DRenderer(){this._3dR.na.style.display="none"}reveal3DRenderer(){this._3dR.na.style.display="initial"}onShowtime(){this.currentFile._3d.volumeControls.initDefault(),this.setControlsFor3D(),this._3dR.camera.position=[0,0,this.currentFile._3d.volume.dimensions[0]],this.gui.options.open(),this.gui.renderControls.open()}}).selectFiles()})},,,,function(e,t,i){(e.exports=i(4)(!1)).push([e.i,'.file-selecting-container {\r\n    position: absolute;\r\n    background-color: white;\r\n    width: 500px;\r\n    height: 300px;\r\n    top: calc(50% - 150px);\r\n    left: calc(50% - 250px);\r\n    border-radius: 10px;\r\n    border: 2px solid black;\r\n    padding: 10px;\r\n    z-index: 10;\r\n    display: flex;\r\n    flex-flow: column;\r\n    text-shadow: 0 1px white;\r\n}\r\n\r\n.file-selecting-input {\r\n    position: absolute;\r\n    clip: rect(0,0,0,0);\r\n    width: 1px;\r\n}\r\n\r\n.file-selecting-submit {\r\n    align-self: flex-end;\r\n}\r\n\r\n.file-selecting-drag-and-drop {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    font-size: 1.4rem;\r\n    position: relative;\r\n    flex-grow: 1;\r\n    border: 2px dashed rgba(0,0,0,.4);\r\n    display: flex;\r\n    overflow: auto;\r\n    padding: 3px;\r\n}\r\n\r\n.file-selecting-drag-and-drop-empty::after {\r\n    margin: auto;\r\n    content: "\\41F\\435\\440\\435\\442\\430\\449\\438\\442\\435   \\444\\430\\439\\43B\\44B   c\\44E\\434\\430";\r\n    color: rgba(0,0,0,.7);\r\n}\r\n',""])},function(e,t,i){var r=i(5);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};i(3)(r,n);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbGUvRGljb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudC9GaWxlU2VsZWN0b3IvRmlsZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Wb2x1bWVDb250b3JvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudC9GaWxlU2VsZWN0b3IvRmlsZVNlbGVjdG9yLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50L0ZpbGVTZWxlY3Rvci9GaWxlU2VsZWN0b3IuY3NzPzM5MDgiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIxIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJEaWNvbSIsIltvYmplY3QgT2JqZWN0XSIsImZpbGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiRmlsZSIsIkZpbGVMaXN0IiwiRXJyb3IiLCJ0aGlzIiwiZnJvbSIsImZpbGVzVXJsIiwiZmlsZSIsImZpbmQiLCJfZmlsZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm1hcCIsImdldFVybCIsInJlZHVjZSIsInVybCIsIkZpbGVTZWxlY3Rvcl9GaWxlU2VsZWN0b3IiLCJzdXBwb3J0ZWRGaWxlcyIsInNlbGVjdEZpbGVzSGFuZGxlciIsImluaXRIVE1MIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5wdXQiLCJsYWJlbEJ1dHRvbiIsImxhYmVsRHJhZ0FuZERyb3AiLCJzdWJtaXRCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lclRleHQiLCJqb2luIiwiYXBwZW5kQ2hpbGQiLCJodG1sIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidW5kZWZpbmVkIiwidGFyZ2V0IiwiZGF0YVRyYW5zZmVyIiwiY29udGFpbnMiLCJyZW1vdmUiLCJpbmRleCIsImJvZHkiLCJyZW1vdmVDaGlsZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25jbGljayIsImNvbmRpdGlvbiIsIlJlZ0V4cCIsInRlc3QiLCJWb2x1bWVDb250cm9scyIsInYiLCJ2b2x1bWUiLCJ2b2x1bWVSZW5kZXJpbmciLCJsb3dlclRocmVzaG9sZCIsInVwcGVyVGhyZXNob2xkIiwid2luZG93TG93Iiwid2luZG93SGlnaCIsIm1pbkNvbG9yIiwibWF4Q29sb3IiLCJvcGFjaXR5IiwieHRrU2NyaXB0Iiwic3JjIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJvbmxvYWQiLCJmaWxlU2VsZWN0b3IiLCJvblNob3d0aW1lIiwiaW5pdCIsIl8yZFIiLCJfM2RSIiwiWCIsInJlbmRlcmVyM0QiLCJndWkiLCJkYXRfZ3VpX21vZHVsZSIsIl9yZW5kcmVyIiwic2hvdzJEIiwib3B0aW9ucyIsImFkZEZvbGRlciIsIm9uRmluaXNoQ2hhbmdlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJIZSIsImhpZGUyRFJlbmRlcmVyIiwicmV2ZWFsM0RSZW5kZXJlciIsInNldENvbnRyb2xzRm9yM0QiLCJyZW5kZXIiLCJyZW5kZXJDb250cm9scyIsIm9wZW4iLCJoaWRlM0RSZW5kZXJlciIsInJldmVhbDJEUmVuZGVyZXIiLCJzZXRDb250cm9sc0ZvcjJEIiwiX29yaWVudGF0aW9uMkRDYW52YXNlcyIsImhpZGVDb250cm9scyIsImRpY29tIiwiY3VycmVudEZpbGVJbmZvIiwidHlwZSIsImN1cnJlbnRGaWxlIiwiXzJkIiwidm9sdW1lcyIsImNhbnZhc2VzIiwiY3VycmVudEluZGV4IiwiY3VycmVudEZpbGVOYW1lIiwiXzNkIiwidm9sdW1lQ29udHJvbHMiLCJvcmllbnRhdGlvbjJEQ2FudmFzZXMiLCJvcmllbnRhdGlvbiIsImZvckVhY2giLCJyZW5kZXJlciIsImRlc3Ryb3kiLCJpbml0MkRDYW52YXNlcyIsInJlbW92ZUZvbGRlciIsImxpc3RlbiIsImRvbUVsZW1lbnQiLCJwb2ludGVyRXZlbnRzIiwibWluIiwibWF4Iiwic3RlcCIsIm9uQ2hhbmdlIiwiZ2V0RmlsZSIsInNlbGVjdEZpbGVzIiwiYWRkQ29sb3IiLCJzaG93IiwiZ2V0RmlsZXMiLCJhZGRGaWxlIiwicmV2ZWFsQ29udHJvbHMiLCJ1cmxzIiwiZ2V0VXJscyIsIl8zZFZvbHVtZSIsIl8yZFZvbHVtZSIsImJvcmRlcnMiLCJyZW5kZXJlcjJEIiwiVCIsIlJlIiwiSCIsImRpc3BsYXkiLCJuYSIsImluaXREZWZhdWx0IiwiY2FtZXJhIiwicG9zaXRpb24iLCJkaW1lbnNpb25zIiwiY29udGVudCIsImhtciIsInRyYW5zZm9ybSIsImluc2VydEludG8iLCJsb2NhbHMiXSwibWFwcGluZ3MiOiJhQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUlBTSxFQUFBLEVBQUFDLEtBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFBQUcsR0FDQUcsRUFBQVAsSUFDQUssRUFBQUcsS0FBQUQsRUFBQVAsR0FBQSxJQUVBTyxFQUFBUCxHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU8sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVYsRUFBQUgsS0FDQWMsRUFBQWQsR0FBQUcsRUFBQUgsSUFLQSxJQUZBZSxLQUFBaEIsR0FFQU8sRUFBQUMsUUFDQUQsRUFBQVUsT0FBQVYsR0FPQSxPQUhBVyxFQUFBUixLQUFBUyxNQUFBRCxFQUFBYixPQUdBZSxJQUVBLFNBQUFBLElBRUEsSUFEQSxJQUFBQyxFQUNBZixFQUFBLEVBQWlCQSxFQUFBWSxFQUFBVixPQUE0QkYsSUFBQSxDQUc3QyxJQUZBLElBQUFnQixFQUFBSixFQUFBWixHQUNBaUIsR0FBQSxFQUNBQyxFQUFBLEVBQWtCQSxFQUFBRixFQUFBZCxPQUEyQmdCLElBQUEsQ0FDN0MsSUFBQUMsRUFBQUgsRUFBQUUsR0FDQSxJQUFBZixFQUFBZ0IsS0FBQUYsR0FBQSxHQUVBQSxJQUNBTCxFQUFBUSxPQUFBcEIsSUFBQSxHQUNBZSxFQUFBTSxJQUFBQyxFQUFBTixFQUFBLEtBR0EsT0FBQUQsRUFJQSxJQUFBUSxLQUtBcEIsR0FDQXFCLEVBQUEsR0FHQVosS0FHQSxTQUFBUyxFQUFBMUIsR0FHQSxHQUFBNEIsRUFBQTVCLEdBQ0EsT0FBQTRCLEVBQUE1QixHQUFBOEIsUUFHQSxJQUFBQyxFQUFBSCxFQUFBNUIsSUFDQUssRUFBQUwsRUFDQWdDLEdBQUEsRUFD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S0FBQWdHLFlBQUFNLElBQUFqRCxPQUFBc0YsV0FBQSxJQUNBM0ksS0FBQXlFLElBQUFJLFFBQUFVLE9BQ0F2RixLQUFBeUUsSUFBQWEsZUFBQUMsVURqUUFnQyxxQ0VSQTdKLEVBQUFELFFBQUFKLEVBQUEsRUFBQUEsRUFBQSxJQUtBakIsTUFBQXNCLEVBQUExQixFQUFBLDJpQ0FBZ2tDLHNCQ0poa0MsSUFBQTRNLEVBQUF2TCxFQUFBLEdBRUEsaUJBQUF1TCxRQUFBbEwsRUFBQTFCLEVBQUE0TSxFQUFBLE1BT0EsSUFBQS9ELEdBQWVnRSxLQUFBLEVBRWZDLGVBUEFBLEVBUUFDLGdCQUFBM0csR0FFQS9FLEVBQUEsRUFBQUEsQ0FBQXVMLEVBQUEvRCxHQUVBK0QsRUFBQUksU0FBQXRMLEVBQUFELFFBQUFtTCxFQUFBSSIsImZpbGUiOiJtYWluLmVkODk2MmEwNzc0NDYxZTdjNmEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MTogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMSwwXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpY29tIHtcclxuICAgIGNvbnN0cnVjdG9yKGZpbGVzKSB7XHJcbiAgICAgICAgaWYgKCFmaWxlcyAmJiAoQXJyYXkuaXNBcnJheShmaWxlcykgfHwgIShmaWxlcyBpbnN0YW5jZW9mIEZpbGUpIHx8ICEoZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV3JvbmcgZmlsZSB0eXBlIGluIHRoZSBEaWNvbSBjb25zdHJ1Y3RvcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5maWxlcyA9IEFycmF5LmZyb20oZmlsZXMpO1xyXG4gICAgICAgIHRoaXMuZmlsZXNVcmwgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVcmwoZmlsZSkge1xyXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgRmlsZSkge1xyXG4gICAgICAgICAgICBpZiAoISh+KHRoaXMuZmlsZXMuZmluZChfZmlsZSA9PiBfZmlsZSA9PT0gZmlsZSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVzVXJsW2ZpbGUubmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW2ZpbGUubmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW2ZpbGUubmFtZV0gPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBjb25zdCBfZmlsZSA9IHRoaXMuZmlsZXNbZmlsZV07XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9maWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZXNVcmxbX2ZpbGUubmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW2ZpbGUubmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW19maWxlLm5hbWVdID0gVVJMLmNyZWF0ZU9iamVjdFVSTChfZmlsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGZpbGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9maWxlID0gdGhpcy5maWxlcy5maW5kKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gZmlsZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9maWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZXNVcmxbX2ZpbGUubmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW2ZpbGUubmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzVXJsW19maWxlLm5hbWVdID0gVVJMLmNyZWF0ZU9iamVjdFVSTChfZmlsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXJscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWxlcy5tYXAoZmlsZSA9PiB0aGlzLmdldFVybChmaWxlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXJsc1dpdGhGaWxlTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWxlcy5yZWR1Y2UoKGZpbGVzVXJsLCBmaWxlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsKGZpbGUpO1xyXG4gICAgICAgICAgICBmaWxlc1VybFtmaWxlLm5hbWVdID0gdXJsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZpbGVzVXJsO1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vRmlsZVNlbGVjdG9yLmNzcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlU2VsZWN0b3Ige1xyXG4gICAgY29uc3RydWN0b3Ioc3VwcG9ydGVkRmlsZXMgPSBbXSkge1xyXG4gICAgICAgIHRoaXMuZmlsZXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydGVkRmlsZXMgPSBzdXBwb3J0ZWRGaWxlcztcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RGaWxlc0hhbmRsZXIgPSB0aGlzLnNlbGVjdEZpbGVzSGFuZGxlci5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRIVE1MKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEhUTUwoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBjb25zdCBsYWJlbERyYWdBbmREcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24tYXBwJyk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmaWxlLXNlbGVjdGluZy1jb250YWluZXInKTtcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdmaWxlLXNlbGVjdGluZy1pbnB1dCcpO1xyXG4gICAgICAgIGxhYmVsQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi1hcHAnKTtcclxuICAgICAgICBsYWJlbERyYWdBbmREcm9wLmNsYXNzTGlzdC5hZGQoJ2ZpbGUtc2VsZWN0aW5nLWRyYWctYW5kLWRyb3AnKTtcclxuICAgICAgICBsYWJlbERyYWdBbmREcm9wLmNsYXNzTGlzdC5hZGQoJ2ZpbGUtc2VsZWN0aW5nLWRyYWctYW5kLWRyb3AtZW1wdHknKTtcclxuICAgICAgICBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCgnZmlsZS1zZWxlY3Rpbmctc3VibWl0Jyk7XHJcbiAgICAgICAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi1hcHAnKTtcclxuXHJcbiAgICAgICAgbGFiZWxCdXR0b24uc2V0QXR0cmlidXRlKCdmb3InLCAnZmlsZS1zZWxlY3RpbmcnKTtcclxuICAgICAgICBsYWJlbERyYWdBbmREcm9wLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2ZpbGUtc2VsZWN0aW5nJyk7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcclxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZmlsZS1zZWxlY3RpbmcnKTtcclxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2ZpbGUtc2VsZWN0aW5nJyk7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICcnKTtcclxuXHJcbiAgICAgICAgbGFiZWxCdXR0b24uaW5uZXJUZXh0ID0gJ9CS0YvQsdC10YDQuNGC0LUg0YTQsNC50LvRiyc7XHJcbiAgICAgICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9ICfQntC6JztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkRmlsZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYWNjZXB0JywgdGhpcy5zdXBwb3J0ZWRGaWxlcy5qb2luKCcsICcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsQnV0dG9uKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWxEcmFnQW5kRHJvcCk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN1Ym1pdEJ1dHRvbik7XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLmxhYmVsQnV0dG9uID0gbGFiZWxCdXR0b247XHJcbiAgICAgICAgdGhpcy5sYWJlbERyYWdBbmREcm9wID0gbGFiZWxEcmFnQW5kRHJvcDtcclxuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbiA9IHN1Ym1pdEJ1dHRvbjtcclxuICAgICAgICB0aGlzLmh0bWwgPSBjb250YWluZXI7XHJcblxyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2VsZWN0RmlsZXNIYW5kbGVyKTtcclxuICAgICAgICBsYWJlbERyYWdBbmREcm9wLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW50ZXJcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgbGFiZWxEcmFnQW5kRHJvcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjEpJztcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgbGFiZWxEcmFnQW5kRHJvcC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgbGFiZWxEcmFnQW5kRHJvcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnaW5pdGlhbCc7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIGxhYmVsRHJhZ0FuZERyb3AuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsICAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIGxhYmVsRHJhZ0FuZERyb3AuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgdGhpcy5zZWxlY3RGaWxlc0hhbmRsZXIsIGZhbHNlKTtcclxuICAgICAgICBsYWJlbERyYWdBbmREcm9wLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4geyBlLnByZXZlbnREZWZhdWx0KCk7IH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RGaWxlc0hhbmRsZXIoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5maWxlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZXMgPSBBcnJheS5mcm9tKGUudGFyZ2V0LmZpbGVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZXMgPSBBcnJheS5mcm9tKGUuZGF0YVRyYW5zZmVyLmZpbGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbGVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhYmVsRHJhZ0FuZERyb3AuaW5uZXJUZXh0ID0gdGhpcy5maWxlcy5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKS5qb2luKCdcXG4nKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhYmVsRHJhZ0FuZERyb3AuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaWxlLXNlbGVjdGluZy1kcmFnLWFuZC1kcm9wLWVtcHR5JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxEcmFnQW5kRHJvcC5jbGFzc0xpc3QucmVtb3ZlKCdmaWxlLXNlbGVjdGluZy1kcmFnLWFuZC1kcm9wLWVtcHR5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxhYmVsRHJhZ0FuZERyb3AuaW5uZXJUZXh0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoISh0aGlzLmxhYmVsRHJhZ0FuZERyb3AuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaWxlLXNlbGVjdGluZy1kcmFnLWFuZC1kcm9wLWVtcHR5JykpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsRHJhZ0FuZERyb3AuY2xhc3NMaXN0LmFkZCgnZmlsZS1zZWxlY3RpbmctZHJhZy1hbmQtZHJvcC1lbXB0eScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhYmVsRHJhZ0FuZERyb3Auc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2luaXRpYWwnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZpbGUoaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5maWxlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzW2luZGV4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuaHRtbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5odG1sKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRGaWxlcygpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXBwb3J0ZWRGaWxlcyA9IHRoaXMuc3VwcG9ydGVkRmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmZpbGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydGVkRmlsZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1cHBvcnRlZEZpbGVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChuZXcgUmVnRXhwKCdcXFxcJyArIHN1cHBvcnRlZEZpbGVzW2pdICsgJyQnKSkudGVzdChmaWxlc1tpXS5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoYFVuc3VwcG9ydGVkIGZpbGU6ICR7ZmlsZXNbaV0ubmFtZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmlsZXMpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm9sdW1lQ29udHJvbHMge1xyXG4gICAgY29uc3RydWN0b3Iodikge1xyXG4gICAgICAgIHRoaXMudm9sdW1lID0gdjtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RGVmYXVsdCgpIHtcclxuICAgICAgICB0aGlzLnZvbHVtZS52b2x1bWVSZW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudm9sdW1lLmxvd2VyVGhyZXNob2xkID0gODA7XHJcbiAgICAgICAgdGhpcy52b2x1bWUudXBwZXJUaHJlc2hvbGQgPSAxMjAwO1xyXG4gICAgICAgIHRoaXMudm9sdW1lLndpbmRvd0xvdyA9IDExNTtcclxuICAgICAgICB0aGlzLnZvbHVtZS53aW5kb3dIaWdoID0gMzYwO1xyXG4gICAgICAgIHRoaXMudm9sdW1lLm1pbkNvbG9yID0gWzAuMiwgMC4wNjY2NjY2NjY2NjY2NjY2NywgMV07XHJcbiAgICAgICAgdGhpcy52b2x1bWUubWF4Q29sb3IgPSBbMC41ODQzMTM3MjU0OTAxOTYxLCAxLCAwXTtcclxuICAgICAgICB0aGlzLnZvbHVtZS5vcGFjaXR5ID0gMC4yO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZvbHVtZVJlbmRlcmluZyh2b2x1bWVSZW5kZXJpbmcgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy52b2x1bWUudm9sdW1lUmVuZGVyaW5nID0gdm9sdW1lUmVuZGVyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZvbHVtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52b2x1bWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG9wYWNpdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudm9sdW1lLm9wYWNpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG9wYWNpdHkob3BhY2l0eSkge1xyXG4gICAgICAgIHRoaXMudm9sdW1lLm9wYWNpdHkgPSBvcGFjaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsb3dlclRocmVzaG9sZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52b2x1bWUubG93ZXJUaHJlc2hvbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxvd2VyVGhyZXNob2xkKGxvd2VyVGhyZXNob2xkKSB7XHJcbiAgICAgICAgdGhpcy52b2x1bWUubG93ZXJUaHJlc2hvbGQgPSBsb3dlclRocmVzaG9sZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdXBwZXJUaHJlc2hvbGQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudm9sdW1lLnVwcGVyVGhyZXNob2xkO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB1cHBlclRocmVzaG9sZCh1cHBlclRocmVzaG9sZCkge1xyXG4gICAgICAgIHRoaXMudm9sdW1lLnVwcGVyVGhyZXNob2xkID0gdXBwZXJUaHJlc2hvbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHdpbmRvd0xvdygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52b2x1bWUud2luZG93TG93O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB3aW5kb3dMb3cod2luZG93TG93KSB7XHJcbiAgICAgICAgdGhpcy52b2x1bWUud2luZG93TG93ID0gd2luZG93TG93O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aW5kb3dIaWdoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZvbHVtZS53aW5kb3dIaWdoO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB3aW5kb3dIaWdoKHdpbmRvd0hpZ2gpIHtcclxuICAgICAgICB0aGlzLnZvbHVtZS53aW5kb3dIaWdoID0gd2luZG93SGlnaDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWluQ29sb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnZvbHVtZS5taW5Db2xvclswXSAqIDI1NSwgdGhpcy52b2x1bWUubWluQ29sb3JbMV0gKiAyNTUsIHRoaXMudm9sdW1lLm1pbkNvbG9yWzJdICogMjU1XTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbWluQ29sb3IobWluQ29sb3IpIHtcclxuICAgICAgICB0aGlzLnZvbHVtZS5taW5Db2xvclswXSA9IG1pbkNvbG9yWzBdIC8gMjU2OyBcclxuICAgICAgICB0aGlzLnZvbHVtZS5taW5Db2xvclsxXSA9IG1pbkNvbG9yWzFdIC8gMjU2OyBcclxuICAgICAgICB0aGlzLnZvbHVtZS5taW5Db2xvclsyXSA9IG1pbkNvbG9yWzJdIC8gMjU2OyBcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWF4Q29sb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnZvbHVtZS5tYXhDb2xvclswXSAqIDI1NSwgdGhpcy52b2x1bWUubWF4Q29sb3JbMV0gKiAyNTUsIHRoaXMudm9sdW1lLm1heENvbG9yWzJdICogMjU1XTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbWF4Q29sb3IobWF4Q29sb3IpIHtcclxuICAgICAgICB0aGlzLnZvbHVtZS5tYXhDb2xvclswXSA9IG1heENvbG9yWzBdIC8gMjU2OyBcclxuICAgICAgICB0aGlzLnZvbHVtZS5tYXhDb2xvclsxXSA9IG1heENvbG9yWzFdIC8gMjU2OyBcclxuICAgICAgICB0aGlzLnZvbHVtZS5tYXhDb2xvclsyXSA9IG1heENvbG9yWzJdIC8gMjU2OyBcclxuICAgIH0gICAgXHJcbn1cclxuIiwiaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XHJcblxyXG5jb25zdCB4dGtTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxueHRrU2NyaXB0LnNyYyA9IFwieHRrLmpzXCI7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoeHRrU2NyaXB0KTtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xyXG4gIGFwcC5zZWxlY3RGaWxlcygpO1xyXG59O1xyXG4iLCJpbXBvcnQgKiBhcyBkYXQgZnJvbSAnZGF0Lmd1aSc7XHJcblxyXG5pbXBvcnQgRGljb20gZnJvbSAnLi9maWxlL0RpY29tJztcclxuaW1wb3J0IEZpbGVTZWxlY3RvciBmcm9tICcuL0NvbXBvbmVudC9GaWxlU2VsZWN0b3IvRmlsZVNlbGVjdG9yJztcclxuaW1wb3J0IFZvbHVtZUNvbnRyb2xzIGZyb20gJy4vVm9sdW1lQ29udG9yb2xzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmZpbGVTZWxlY3RvciA9IG5ldyBGaWxlU2VsZWN0b3IoWycuZGNtJ10pO1xyXG5cclxuICAgICAgICB0aGlzLm9uU2hvd3RpbWUgPSB0aGlzLm9uU2hvd3RpbWUuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLl8yZFIgPSBudWxsO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5fM2RSID0gbmV3IFgucmVuZGVyZXIzRCgpO1xyXG4gICAgICAgIHRoaXMuXzNkUi5pbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3VpID0ge1xyXG4gICAgICAgICAgICBndWk6IG5ldyBkYXQuR1VJKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZHJlciA9ICczRCc7XHJcbiAgICAgICAgdGhpcy5zaG93MkQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5vcHRpb25zID0gdGhpcy5ndWkuZ3VpLmFkZEZvbGRlcignT3B0aW9uczonKTtcclxuICAgICAgICB0aGlzLmd1aS5vcHRpb25zLmFkZCh0aGlzLCAncmVzZXRGaWxlJykubmFtZSgnQ2hvb3NlIGFub3RoZXIgZmlsZScpO1xyXG4gICAgICAgIHRoaXMuZ3VpLm9wdGlvbnMuYWRkKHRoaXMsICdfcmVuZHJlcicsIFsgJzJEJywgJzNEJyBdKS5uYW1lKCdSZW5kZXJlciBUeXBlOicpLm9uRmluaXNoQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09ICczRCcpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuXzJkUi5IZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUyRFJlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJldmVhbDNEUmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udHJvbHNGb3IzRCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fM2RSLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMub3BlbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fM2RSLkhlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZTNEUmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmV2ZWFsMkRSZW5kZXJlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb250cm9sc0ZvcjJEKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8yZFIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24yRENhbnZhc2VzID0gJ1onO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scyA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuaGlkZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsZXMgPSB7XHJcbiAgICAgICAgICAgIGRpY29tOiBbXSxcclxuICAgICAgICAgICAgY3VycmVudEZpbGVJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGljb20nLFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IC0xLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZSA9IHtcclxuICAgICAgICAgICAgXzJkOiB7XHJcbiAgICAgICAgICAgICAgICB2b2x1bWVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGNhbnZhc2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleDogMCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRGaWxlTmFtZTogJydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXzNkOiB7XHJcbiAgICAgICAgICAgICAgICB2b2x1bWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB2b2x1bWVDb250cm9sczogbnVsbCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmN1cnJlbnRGaWxlLl8yZCwgJ3ZvbHVtZScsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52b2x1bWVzW3RoaXMuY3VycmVudEluZGV4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jdXJyZW50RmlsZS5fMmQsICdyZW5kZXJlcicsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNlc1t0aGlzLmN1cnJlbnRJbmRleF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgb3JpZW50YXRpb24yRENhbnZhc2VzKG9yaWVudGF0aW9uID0gJ1onKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZS5fMmQuY2FudmFzZXMuZm9yRWFjaCgocmVuZGVyZXIpID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRGaWxlLl8yZC5jYW52YXNlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaW5pdDJEQ2FudmFzZXMob3JpZW50YXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLnJldmVhbDJEUmVuZGVyZXIoKTtcclxuICAgICAgICB0aGlzLl8yZFIucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG9yaWVudGF0aW9uMkRDYW52YXNlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb24yRENhbnZhc2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbnRyb2xzRm9yMkQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3VpLnJlbmRlckNvbnRyb2xzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3VpLmd1aS5yZW1vdmVGb2xkZXIodGhpcy5ndWkucmVuZGVyQ29udHJvbHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMgPSB0aGlzLmd1aS5ndWkuYWRkRm9sZGVyKCdSZW5kZXIgQ29udHJvbHMnKTtcclxuXHJcbiAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMuYWRkKHRoaXMuY3VycmVudEZpbGUuXzJkLCAnY3VycmVudEZpbGVOYW1lJylcclxuICAgICAgICAubmFtZSgnRmlsZSBOYW1lOicpLmxpc3RlbigpLmRvbUVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5hZGQodGhpcy5jdXJyZW50RmlsZS5fMmQsICdjdXJyZW50SW5kZXgnKVxyXG4gICAgICAgIC5taW4oMClcclxuICAgICAgICAubWF4KHRoaXMuY3VycmVudEZpbGUuXzJkLnZvbHVtZXMubGVuZ3RoIC0gMSlcclxuICAgICAgICAuc3RlcCgxKS5uYW1lKCdGaWxlIG51bWJlcjonKVxyXG4gICAgICAgIC5vbkNoYW5nZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuXzJkUi5IZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZTJEUmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fMmRSID0gdGhpcy5jdXJyZW50RmlsZS5fMmQucmVuZGVyZXI7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbGUuXzJkLmN1cnJlbnRGaWxlTmFtZSA9IHRoaXMuZmlsZVNlbGVjdG9yLmdldEZpbGUodGhpcy5jdXJyZW50RmlsZS5fMmQuY3VycmVudEluZGV4KS5uYW1lO1xyXG4gICAgICAgICAgICB0aGlzLnJldmVhbDJEUmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fMmRSLnJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5hZGQodGhpcywgJ29yaWVudGF0aW9uMkRDYW52YXNlcycsIFsgJ1gnLCAnWScsICdaJyBdKS5uYW1lKCdPcmllbnRhdGlvbjonKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldEZpbGUoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZS5fMmQuY2FudmFzZXMuZm9yRWFjaCgocmVuZGVyZXIpID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl8zZFIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5ndWkuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RGaWxlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbnRyb2xzRm9yM0QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3VpLnJlbmRlckNvbnRyb2xzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3VpLmd1aS5yZW1vdmVGb2xkZXIodGhpcy5ndWkucmVuZGVyQ29udHJvbHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scyA9IHRoaXMuZ3VpLmd1aS5hZGRGb2xkZXIoJ1JlbmRlciBDb250cm9scycpO1xyXG5cclxuICAgICAgICBjb25zdCB2b2x1bWVDb250cm9scyA9IHRoaXMuY3VycmVudEZpbGUuXzNkLnZvbHVtZUNvbnRyb2xzO1xyXG5cclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5hZGQodm9sdW1lQ29udHJvbHMsICdvcGFjaXR5JywgMCwgMSk7XHJcbiAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMuYWRkKHZvbHVtZUNvbnRyb2xzLCAnbG93ZXJUaHJlc2hvbGQnLCAwLCAxMDAwKTtcclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5hZGQodm9sdW1lQ29udHJvbHMsICd1cHBlclRocmVzaG9sZCcsIDAsIDIwMDApO1xyXG4gICAgICAgIHRoaXMuZ3VpLnJlbmRlckNvbnRyb2xzLmFkZCh2b2x1bWVDb250cm9scywgJ3dpbmRvd0xvdycsIDAsIDEwMDApO1xyXG4gICAgICAgIHRoaXMuZ3VpLnJlbmRlckNvbnRyb2xzLmFkZCh2b2x1bWVDb250cm9scywgJ3dpbmRvd0hpZ2gnLCAwLCAxMDAwKTtcclxuICAgICAgICB0aGlzLmd1aS5yZW5kZXJDb250cm9scy5hZGRDb2xvcih2b2x1bWVDb250cm9scywgJ21pbkNvbG9yJyk7XHJcbiAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMuYWRkQ29sb3Iodm9sdW1lQ29udHJvbHMsICdtYXhDb2xvcicpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNlbGVjdEZpbGVzKCkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVTZWxlY3RvciA9IHRoaXMuZmlsZVNlbGVjdG9yO1xyXG4gICAgICAgIGZpbGVTZWxlY3Rvci5zaG93KCk7XHJcblxyXG4gICAgICAgIGxldCBmaWxlcztcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGZpbGVzID0gYXdhaXQgZmlsZVNlbGVjdG9yLmdldEZpbGVzKCk7XHJcbiAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICB0aGlzLnNlbGVjdEZpbGVzKCk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgIGZpbGVTZWxlY3Rvci5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmaWxlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmaWxlU2VsZWN0b3IucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RmlsZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRkRmlsZShuZXcgRGljb20oZmlsZXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXZlYWxDb250cm9scygpO1xyXG5cclxuICAgICAgICB0aGlzLl8zZFIuYWRkKHRoaXMuY3VycmVudEZpbGUuXzNkLnZvbHVtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuXzNkUi5vblNob3d0aW1lID0gdGhpcy5vblNob3d0aW1lO1xyXG5cclxuICAgICAgICB0aGlzLl8zZFIucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRmlsZShmaWxlKSB7XHJcbiAgICAgICAgdGhpcy5maWxlcy5kaWNvbS5wdXNoKGZpbGUpO1xyXG4gICAgICAgIHRoaXMuZmlsZXMuY3VycmVudEZpbGVJbmZvLnR5cGUgPSAnZGljb20nO1xyXG4gICAgICAgIHRoaXMuZmlsZXMuY3VycmVudEZpbGVJbmZvLmluZGV4ICs9IDE7XHJcblxyXG4gICAgICAgIGNvbnN0IHVybHMgPSBmaWxlLmdldFVybHMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgXzNkVm9sdW1lID0gbmV3IFgudm9sdW1lKCk7XHJcbiAgICAgICAgXzNkVm9sdW1lLmZpbGUgPSB1cmxzO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRGaWxlLl8zZC52b2x1bWUgPSBfM2RWb2x1bWU7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZS5fM2Qudm9sdW1lQ29udHJvbHMgPSBuZXcgVm9sdW1lQ29udHJvbHMoXzNkVm9sdW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZS5fMmQudm9sdW1lcyA9IHVybHMubWFwKCh1cmwpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgXzJkVm9sdW1lID0gbmV3IFgudm9sdW1lKCk7XHJcbiAgICAgICAgICAgIF8yZFZvbHVtZS5maWxlID0gdXJsO1xyXG4gICAgICAgICAgICBfMmRWb2x1bWUuYm9yZGVycyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF8yZFZvbHVtZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0MkRDYW52YXNlcyh0aGlzLl9vcmllbnRhdGlvbjJEQ2FudmFzZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQyRENhbnZhc2VzKG9yaWVudGF0aW9uID0gJ1onKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsZS5fMmQuY2FudmFzZXMgPSB0aGlzLmN1cnJlbnRGaWxlLl8yZC52b2x1bWVzLm1hcCgodm9sdW1lKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFgucmVuZGVyZXIyRCgpO1xyXG4gICAgICAgICAgICByZW5kZXJlci5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gICAgICAgICAgICByZW5kZXJlci5pbml0KCk7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLmFkZCh2b2x1bWUpO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyZXIuVC5SZS5ILnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyZXI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudEZpbGUuXzJkLmN1cnJlbnRGaWxlTmFtZSA9IHRoaXMuZmlsZVNlbGVjdG9yLmdldEZpbGUodGhpcy5jdXJyZW50RmlsZS5fMmQuY3VycmVudEluZGV4KS5uYW1lO1xyXG5cclxuICAgICAgICB0aGlzLl8yZFIgPSB0aGlzLmN1cnJlbnRGaWxlLl8yZC5yZW5kZXJlcjtcclxuXHJcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24yRENhbnZhc2VzID0gb3JpZW50YXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZUNvbnRyb2xzKCkge1xyXG4gICAgICAgIHRoaXMuZ3VpLmd1aS5kb21FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZWFsQ29udHJvbHMoKSB7XHJcbiAgICAgICAgdGhpcy5ndWkuZ3VpLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcclxuICAgIH1cclxuXHJcbiAgICBoaWRlMkRSZW5kZXJlcigpIHtcclxuICAgICAgICB0aGlzLl8yZFIuVC5SZS5ILnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZWFsMkRSZW5kZXJlcigpIHtcclxuICAgICAgICB0aGlzLl8yZFIuVC5SZS5ILnN0eWxlLmRpc3BsYXkgPSAnaW5pdGlhbCc7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZTNEUmVuZGVyZXIoKSB7XHJcbiAgICAgICAgdGhpcy5fM2RSLm5hLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZWFsM0RSZW5kZXJlcigpIHtcclxuICAgICAgICB0aGlzLl8zZFIubmEuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcclxuICAgIH1cclxuXHJcbiAgICBvblNob3d0aW1lKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEZpbGUuXzNkLnZvbHVtZUNvbnRyb2xzLmluaXREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q29udHJvbHNGb3IzRCgpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5fM2RSLmNhbWVyYS5wb3NpdGlvbiA9IFswLCAwLCB0aGlzLmN1cnJlbnRGaWxlLl8zZC52b2x1bWUuZGltZW5zaW9uc1swXV07ICAgXHJcbiAgICAgICAgdGhpcy5ndWkub3B0aW9ucy5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5ndWkucmVuZGVyQ29udHJvbHMub3BlbigpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZpbGUtc2VsZWN0aW5nLWNvbnRhaW5lciB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAgIHdpZHRoOiA1MDBweDtcXHJcXG4gICAgaGVpZ2h0OiAzMDBweDtcXHJcXG4gICAgdG9wOiBjYWxjKDUwJSAtIDE1MHB4KTtcXHJcXG4gICAgbGVmdDogY2FsYyg1MCUgLSAyNTBweCk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICB6LWluZGV4OiAxMDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW47XFxyXFxuICAgIHRleHQtc2hhZG93OiAwIDFweCB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmZpbGUtc2VsZWN0aW5nLWlucHV0IHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBjbGlwOiByZWN0KDAsMCwwLDApO1xcclxcbiAgICB3aWR0aDogMXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmlsZS1zZWxlY3Rpbmctc3VibWl0IHtcXHJcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XFxyXFxufVxcclxcblxcclxcbi5maWxlLXNlbGVjdGluZy1kcmFnLWFuZC1kcm9wIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG4gICAgZm9udC1zaXplOiAxLjRyZW07XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbiAgICBib3JkZXI6IDJweCBkYXNoZWQgcmdiYSgwLDAsMCwuNCk7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBwYWRkaW5nOiAzcHg7XFxyXFxufVxcclxcblxcclxcbi5maWxlLXNlbGVjdGluZy1kcmFnLWFuZC1kcm9wLWVtcHR5OjphZnRlciB7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgY29udGVudDogXFxcIlxcXFw0MUZcXFxcNDM1XFxcXDQ0MFxcXFw0MzVcXFxcNDQyXFxcXDQzMFxcXFw0NDlcXFxcNDM4XFxcXDQ0MlxcXFw0MzUgICBcXFxcNDQ0XFxcXDQzMFxcXFw0MzlcXFxcNDNCXFxcXDQ0QiAgIGNcXFxcNDRFXFxcXDQzNFxcXFw0MzBcXFwiO1xcclxcbiAgICBjb2xvcjogcmdiYSgwLDAsMCwuNyk7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL0ZpbGVTZWxlY3Rvci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vRmlsZVNlbGVjdG9yLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vRmlsZVNlbGVjdG9yLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=